import Head from 'next/head'
import { Button } from 'shared/ui/Button/Button'
import IconArrow from 'shared/assets/icons/general/arrow-back.svg'
import { ThemeSwitcher } from '../../shared/ui/ThemeSwitcher/ThemeSwitcher'
import { makeStaticProps, getStaticPaths } from '../../shared/lib/getStatic'
import { useTranslation } from 'next-i18next'

import { useRouter } from 'next/router'
import Link from 'next/link'
import languageDetector from '../../shared/lib/languageDetector'
import i18nextConfig from '../../../next-i18next.config'

const getStaticProps = makeStaticProps(['common'])
export { getStaticPaths, getStaticProps }

export default function Home () {
    const { t, i18n } = useTranslation()
    const router = useRouter()
    const currentLocale = router.query.locale || i18nextConfig.i18n.defaultLocale
    console.log(i18n.language)
    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <>
                <LinkComponent href={'/about/abouts'}>test</LinkComponent>
                <Button>{t('Привет')}</Button>
                <IconArrow/>
                <ThemeSwitcher/>
                {i18nextConfig.i18n.locales.map((locale) => {
                    if (locale === currentLocale) return null
                    return (
                        <LanguageSwitchLink
                            locale={locale}
                            key={locale}
                        />
                    )
                })}
            </>
        </>
    )
}

const LanguageSwitchLink = ({ locale, ...rest }: any) => {
    const router = useRouter()

    let href = rest.href || router.asPath
    let pName = router.pathname
    Object.keys(router.query).forEach((k) => {
        if (k === 'locale') {
            pName = pName.replace(`[${k}]`, locale)
            return
        }
        // @ts-ignore
        pName = pName.replace(`[${k}]`, router.query[k])
    })
    if (locale) {
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        href = rest.href ? `/${locale}${rest.href}` : pName
    }

    return (
        <Link
            href={href}
            onClick={() => {
                languageDetector.cache?.(locale)
            }}
        >
            <Button theme={'clear'}>{locale}</Button>
        </Link>
    )
}

const LinkComponent = ({ children, skipLocaleHandling, ...rest }: any) => {
    const router = useRouter()
    const locale = rest.locale || router.query.locale || ''

    let href = rest.href || router.asPath
    if (href.indexOf('http') === 0) skipLocaleHandling = true
    if (locale && !skipLocaleHandling) {
        href = href
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            ? `/${locale}${href}`
            : router.pathname.replace('[locale]', locale)
    }

    return (
        <>
            <Link href={href} legacyBehavior>
                <a {...rest}>{children}</a>
            </Link>
        </>
    )
}
